/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GnosisEasyAuctionInterface extends ethers.utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "auctionAccessData(uint256)": FunctionFragment;
    "auctionAccessManager(uint256)": FunctionFragment;
    "auctionCounter()": FunctionFragment;
    "auctionData(uint256)": FunctionFragment;
    "cancelSellOrders(uint256,bytes32[])": FunctionFragment;
    "claimFromParticipantOrder(uint256,bytes32[])": FunctionFragment;
    "containsOrder(uint256,bytes32)": FunctionFragment;
    "feeNumerator()": FunctionFragment;
    "feeReceiverUserId()": FunctionFragment;
    "getSecondsRemainingInBatch(uint256)": FunctionFragment;
    "getUserId(address)": FunctionFragment;
    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": FunctionFragment;
    "numUsers()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": FunctionFragment;
    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": FunctionFragment;
    "precalculateSellAmountSum(uint256,uint256)": FunctionFragment;
    "registerUser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeParameters(uint256,address)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionAccessData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionAccessManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellOrders",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromParticipantOrder",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "containsOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiverUserId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsRemainingInBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUserId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initiateAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "numUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeSellOrders",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeSellOrdersOnBehalf",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "precalculateSellAmountSum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeParameters",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuctionAtomically",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionAccessData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionAccessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromParticipantOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsRemainingInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrdersOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "precalculateSellAmountSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuctionAtomically",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCleared(uint256,uint96,uint96,bytes32)": EventFragment;
    "CancellationSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "ClaimedFromOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewAuction(uint256,address,address,uint256,uint256,uint64,uint96,uint96,uint256,uint256,address,bytes)": EventFragment;
    "NewSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewUser(uint64,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UserRegistration(address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancellationSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedFromOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistration"): EventFragment;
}

export class GnosisEasyAuction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GnosisEasyAuctionInterface;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "auctionAccessData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "auctionAccessManager(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    auctionCounter(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "auctionCounter()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auctioningToken: string;
      biddingToken: string;
      orderCancellationEndDate: BigNumber;
      auctionEndDate: BigNumber;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: BigNumber;
      interimSumBidAmount: BigNumber;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: BigNumber;
      minFundingThresholdNotReached: boolean;
      isAtomicClosureAllowed: boolean;
      feeNumerator: BigNumber;
      minFundingThreshold: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: string;
      9: BigNumber;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }>;

    "auctionData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auctioningToken: string;
      biddingToken: string;
      orderCancellationEndDate: BigNumber;
      auctionEndDate: BigNumber;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: BigNumber;
      interimSumBidAmount: BigNumber;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: BigNumber;
      minFundingThresholdNotReached: boolean;
      isAtomicClosureAllowed: boolean;
      feeNumerator: BigNumber;
      minFundingThreshold: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: string;
      9: BigNumber;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelSellOrders(uint256,bytes32[])"(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFromParticipantOrder(uint256,bytes32[])"(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "containsOrder(uint256,bytes32)"(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    feeNumerator(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feeReceiverUserId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSecondsRemainingInBatch(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserId(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getUserId(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)"(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    numUsers(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "numUsers()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "precalculateSellAmountSum(uint256,uint256)"(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerUser(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeParameters(uint256,address)"(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  auctionAccessData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "auctionAccessData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctionAccessManager(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "auctionAccessManager(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

  auctionData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    auctioningToken: string;
    biddingToken: string;
    orderCancellationEndDate: BigNumber;
    auctionEndDate: BigNumber;
    initialAuctionOrder: string;
    minimumBiddingAmountPerOrder: BigNumber;
    interimSumBidAmount: BigNumber;
    interimOrder: string;
    clearingPriceOrder: string;
    volumeClearingPriceOrder: BigNumber;
    minFundingThresholdNotReached: boolean;
    isAtomicClosureAllowed: boolean;
    feeNumerator: BigNumber;
    minFundingThreshold: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: string;
    9: BigNumber;
    10: boolean;
    11: boolean;
    12: BigNumber;
    13: BigNumber;
  }>;

  "auctionData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    auctioningToken: string;
    biddingToken: string;
    orderCancellationEndDate: BigNumber;
    auctionEndDate: BigNumber;
    initialAuctionOrder: string;
    minimumBiddingAmountPerOrder: BigNumber;
    interimSumBidAmount: BigNumber;
    interimOrder: string;
    clearingPriceOrder: string;
    volumeClearingPriceOrder: BigNumber;
    minFundingThresholdNotReached: boolean;
    isAtomicClosureAllowed: boolean;
    feeNumerator: BigNumber;
    minFundingThreshold: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: string;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: string;
    9: BigNumber;
    10: boolean;
    11: boolean;
    12: BigNumber;
    13: BigNumber;
  }>;

  cancelSellOrders(
    auctionId: BigNumberish,
    _sellOrders: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelSellOrders(uint256,bytes32[])"(
    auctionId: BigNumberish,
    _sellOrders: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFromParticipantOrder(
    auctionId: BigNumberish,
    orders: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFromParticipantOrder(uint256,bytes32[])"(
    auctionId: BigNumberish,
    orders: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  containsOrder(
    auctionId: BigNumberish,
    order: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "containsOrder(uint256,bytes32)"(
    auctionId: BigNumberish,
    order: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

  "feeReceiverUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSecondsRemainingInBatch(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSecondsRemainingInBatch(uint256)"(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserId(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "getUserId(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initiateAuction(
    _auctioningToken: string,
    _biddingToken: string,
    orderCancellationEndDate: BigNumberish,
    auctionEndDate: BigNumberish,
    _auctionedSellAmount: BigNumberish,
    _minBuyAmount: BigNumberish,
    minimumBiddingAmountPerOrder: BigNumberish,
    minFundingThreshold: BigNumberish,
    isAtomicClosureAllowed: boolean,
    accessManagerContract: string,
    accessManagerContractData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)"(
    _auctioningToken: string,
    _biddingToken: string,
    orderCancellationEndDate: BigNumberish,
    auctionEndDate: BigNumberish,
    _auctionedSellAmount: BigNumberish,
    _minBuyAmount: BigNumberish,
    minimumBiddingAmountPerOrder: BigNumberish,
    minFundingThreshold: BigNumberish,
    isAtomicClosureAllowed: boolean,
    accessManagerContract: string,
    accessManagerContractData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  numUsers(overrides?: CallOverrides): Promise<BigNumber>;

  "numUsers()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  placeSellOrders(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)"(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  placeSellOrdersOnBehalf(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    orderSubmitter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)"(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    orderSubmitter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  precalculateSellAmountSum(
    auctionId: BigNumberish,
    iterationSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "precalculateSellAmountSum(uint256,uint256)"(
    auctionId: BigNumberish,
    iterationSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerUser(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerUser(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeParameters(
    newFeeNumerator: BigNumberish,
    newfeeReceiverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeParameters(uint256,address)"(
    newFeeNumerator: BigNumberish,
    newfeeReceiverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleAuction(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleAuctionAtomically(
    auctionId: BigNumberish,
    _minBuyAmount: BigNumberish[],
    _sellAmount: BigNumberish[],
    _prevSellOrder: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)"(
    auctionId: BigNumberish,
    _minBuyAmount: BigNumberish[],
    _sellAmount: BigNumberish[],
    _prevSellOrder: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "auctionAccessData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "auctionAccessManager(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auctioningToken: string;
      biddingToken: string;
      orderCancellationEndDate: BigNumber;
      auctionEndDate: BigNumber;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: BigNumber;
      interimSumBidAmount: BigNumber;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: BigNumber;
      minFundingThresholdNotReached: boolean;
      isAtomicClosureAllowed: boolean;
      feeNumerator: BigNumber;
      minFundingThreshold: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: string;
      9: BigNumber;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }>;

    "auctionData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auctioningToken: string;
      biddingToken: string;
      orderCancellationEndDate: BigNumber;
      auctionEndDate: BigNumber;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: BigNumber;
      interimSumBidAmount: BigNumber;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: BigNumber;
      minFundingThresholdNotReached: boolean;
      isAtomicClosureAllowed: boolean;
      feeNumerator: BigNumber;
      minFundingThreshold: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: string;
      9: BigNumber;
      10: boolean;
      11: boolean;
      12: BigNumber;
      13: BigNumber;
    }>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelSellOrders(uint256,bytes32[])"(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      sumAuctioningTokenAmount: BigNumber;
      sumBiddingTokenAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "claimFromParticipantOrder(uint256,bytes32[])"(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      sumAuctioningTokenAmount: BigNumber;
      sumBiddingTokenAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "containsOrder(uint256,bytes32)"(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiverUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecondsRemainingInBatch(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserId(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserId(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)"(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numUsers(overrides?: CallOverrides): Promise<BigNumber>;

    "numUsers()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "precalculateSellAmountSum(uint256,uint256)"(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "registerUser(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeParameters(uint256,address)"(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "settleAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuctionCleared(
      auctionId: BigNumberish | null,
      soldAuctioningTokens: null,
      soldBiddingTokens: null,
      clearingPriceOrder: null
    ): EventFilter;

    CancellationSellOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): EventFilter;

    ClaimedFromOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): EventFilter;

    NewAuction(
      auctionId: BigNumberish | null,
      _auctioningToken: string | null,
      _biddingToken: string | null,
      orderCancellationEndDate: null,
      auctionEndDate: null,
      userId: null,
      _auctionedSellAmount: null,
      _minBuyAmount: null,
      minimumBiddingAmountPerOrder: null,
      minFundingThreshold: null,
      allowListContract: null,
      allowListData: null
    ): EventFilter;

    NewSellOrder(
      auctionId: BigNumberish | null,
      userId: BigNumberish | null,
      buyAmount: null,
      sellAmount: null
    ): EventFilter;

    NewUser(
      userId: BigNumberish | null,
      userAddress: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    UserRegistration(user: string | null, userId: null): EventFilter;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionAccessData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionAccessManager(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionCounter()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auctionData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelSellOrders(uint256,bytes32[])"(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFromParticipantOrder(uint256,bytes32[])"(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "containsOrder(uint256,bytes32)"(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiverUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSecondsRemainingInBatch(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserId(user: string, overrides?: Overrides): Promise<BigNumber>;

    "getUserId(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)"(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    numUsers(overrides?: CallOverrides): Promise<BigNumber>;

    "numUsers()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "precalculateSellAmountSum(uint256,uint256)"(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerUser(user: string, overrides?: Overrides): Promise<BigNumber>;

    "registerUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeParameters(uint256,address)"(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionAccessData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionAccessManager(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionCounter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auctionData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelSellOrders(uint256,bytes32[])"(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFromParticipantOrder(uint256,bytes32[])"(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "containsOrder(uint256,bytes32)"(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeNumerator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeReceiverUserId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecondsRemainingInBatch(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserId(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getUserId(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)"(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    numUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numUsers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)"(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "precalculateSellAmountSum(uint256,uint256)"(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerUser(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerUser(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeParameters(uint256,address)"(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)"(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
