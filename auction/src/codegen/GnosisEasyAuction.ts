/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GnosisEasyAuctionInterface extends utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "auctionAccessData(uint256)": FunctionFragment;
    "auctionAccessManager(uint256)": FunctionFragment;
    "auctionCounter()": FunctionFragment;
    "auctionData(uint256)": FunctionFragment;
    "cancelSellOrders(uint256,bytes32[])": FunctionFragment;
    "claimFromParticipantOrder(uint256,bytes32[])": FunctionFragment;
    "containsOrder(uint256,bytes32)": FunctionFragment;
    "feeNumerator()": FunctionFragment;
    "feeReceiverUserId()": FunctionFragment;
    "getSecondsRemainingInBatch(uint256)": FunctionFragment;
    "getUserId(address)": FunctionFragment;
    "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes)": FunctionFragment;
    "numUsers()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes)": FunctionFragment;
    "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address)": FunctionFragment;
    "precalculateSellAmountSum(uint256,uint256)": FunctionFragment;
    "registerUser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeParameters(uint256,address)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "settleAuctionAtomically(uint256,uint96[],uint96[],bytes32[],bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionAccessData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionAccessManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellOrders",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromParticipantOrder",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "containsOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiverUserId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsRemainingInBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUserId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initiateAuction",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "numUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeSellOrders",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeSellOrdersOnBehalf",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "precalculateSellAmountSum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeParameters",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuctionAtomically",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionAccessData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionAccessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFromParticipantOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsRemainingInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrdersOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "precalculateSellAmountSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuctionAtomically",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCleared(uint256,uint96,uint96,bytes32)": EventFragment;
    "CancellationSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "ClaimedFromOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewAuction(uint256,address,address,uint256,uint256,uint64,uint96,uint96,uint256,uint256,address,bytes)": EventFragment;
    "NewSellOrder(uint256,uint64,uint96,uint96)": EventFragment;
    "NewUser(uint64,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UserRegistration(address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancellationSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedFromOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSellOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistration"): EventFragment;
}

export type AuctionClearedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    auctionId: BigNumber;
    soldAuctioningTokens: BigNumber;
    soldBiddingTokens: BigNumber;
    clearingPriceOrder: string;
  }
>;

export type AuctionClearedEventFilter = TypedEventFilter<AuctionClearedEvent>;

export type CancellationSellOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    auctionId: BigNumber;
    userId: BigNumber;
    buyAmount: BigNumber;
    sellAmount: BigNumber;
  }
>;

export type CancellationSellOrderEventFilter =
  TypedEventFilter<CancellationSellOrderEvent>;

export type ClaimedFromOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    auctionId: BigNumber;
    userId: BigNumber;
    buyAmount: BigNumber;
    sellAmount: BigNumber;
  }
>;

export type ClaimedFromOrderEventFilter =
  TypedEventFilter<ClaimedFromOrderEvent>;

export type NewAuctionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  {
    auctionId: BigNumber;
    _auctioningToken: string;
    _biddingToken: string;
    orderCancellationEndDate: BigNumber;
    auctionEndDate: BigNumber;
    userId: BigNumber;
    _auctionedSellAmount: BigNumber;
    _minBuyAmount: BigNumber;
    minimumBiddingAmountPerOrder: BigNumber;
    minFundingThreshold: BigNumber;
    allowListContract: string;
    allowListData: string;
  }
>;

export type NewAuctionEventFilter = TypedEventFilter<NewAuctionEvent>;

export type NewSellOrderEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    auctionId: BigNumber;
    userId: BigNumber;
    buyAmount: BigNumber;
    sellAmount: BigNumber;
  }
>;

export type NewSellOrderEventFilter = TypedEventFilter<NewSellOrderEvent>;

export type NewUserEvent = TypedEvent<
  [BigNumber, string],
  { userId: BigNumber; userAddress: string }
>;

export type NewUserEventFilter = TypedEventFilter<NewUserEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UserRegistrationEvent = TypedEvent<
  [string, BigNumber],
  { user: string; userId: BigNumber }
>;

export type UserRegistrationEventFilter =
  TypedEventFilter<UserRegistrationEvent>;

export interface GnosisEasyAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GnosisEasyAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    auctionCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        auctioningToken: string;
        biddingToken: string;
        orderCancellationEndDate: BigNumber;
        auctionEndDate: BigNumber;
        initialAuctionOrder: string;
        minimumBiddingAmountPerOrder: BigNumber;
        interimSumBidAmount: BigNumber;
        interimOrder: string;
        clearingPriceOrder: string;
        volumeClearingPriceOrder: BigNumber;
        minFundingThresholdNotReached: boolean;
        isAtomicClosureAllowed: boolean;
        feeNumerator: BigNumber;
        minFundingThreshold: BigNumber;
      }
    >;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    feeNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserId(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  auctionAccessData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctionAccessManager(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

  auctionData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      auctioningToken: string;
      biddingToken: string;
      orderCancellationEndDate: BigNumber;
      auctionEndDate: BigNumber;
      initialAuctionOrder: string;
      minimumBiddingAmountPerOrder: BigNumber;
      interimSumBidAmount: BigNumber;
      interimOrder: string;
      clearingPriceOrder: string;
      volumeClearingPriceOrder: BigNumber;
      minFundingThresholdNotReached: boolean;
      isAtomicClosureAllowed: boolean;
      feeNumerator: BigNumber;
      minFundingThreshold: BigNumber;
    }
  >;

  cancelSellOrders(
    auctionId: BigNumberish,
    _sellOrders: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFromParticipantOrder(
    auctionId: BigNumberish,
    orders: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  containsOrder(
    auctionId: BigNumberish,
    order: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

  getSecondsRemainingInBatch(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserId(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateAuction(
    _auctioningToken: string,
    _biddingToken: string,
    orderCancellationEndDate: BigNumberish,
    auctionEndDate: BigNumberish,
    _auctionedSellAmount: BigNumberish,
    _minBuyAmount: BigNumberish,
    minimumBiddingAmountPerOrder: BigNumberish,
    minFundingThreshold: BigNumberish,
    isAtomicClosureAllowed: boolean,
    accessManagerContract: string,
    accessManagerContractData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numUsers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeSellOrders(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeSellOrdersOnBehalf(
    auctionId: BigNumberish,
    _minBuyAmounts: BigNumberish[],
    _sellAmounts: BigNumberish[],
    _prevSellOrders: BytesLike[],
    allowListCallData: BytesLike,
    orderSubmitter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  precalculateSellAmountSum(
    auctionId: BigNumberish,
    iterationSteps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUser(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeParameters(
    newFeeNumerator: BigNumberish,
    newfeeReceiverAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAuctionAtomically(
    auctionId: BigNumberish,
    _minBuyAmount: BigNumberish[],
    _sellAmount: BigNumberish[],
    _prevSellOrder: BytesLike[],
    allowListCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        auctioningToken: string;
        biddingToken: string;
        orderCancellationEndDate: BigNumber;
        auctionEndDate: BigNumber;
        initialAuctionOrder: string;
        minimumBiddingAmountPerOrder: BigNumber;
        interimSumBidAmount: BigNumber;
        interimOrder: string;
        clearingPriceOrder: string;
        volumeClearingPriceOrder: BigNumber;
        minFundingThresholdNotReached: boolean;
        isAtomicClosureAllowed: boolean;
        feeNumerator: BigNumber;
        minFundingThreshold: BigNumber;
      }
    >;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        sumAuctioningTokenAmount: BigNumber;
        sumBiddingTokenAmount: BigNumber;
      }
    >;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserId(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numUsers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionCleared(uint256,uint96,uint96,bytes32)"(
      auctionId?: BigNumberish | null,
      soldAuctioningTokens?: null,
      soldBiddingTokens?: null,
      clearingPriceOrder?: null
    ): AuctionClearedEventFilter;
    AuctionCleared(
      auctionId?: BigNumberish | null,
      soldAuctioningTokens?: null,
      soldBiddingTokens?: null,
      clearingPriceOrder?: null
    ): AuctionClearedEventFilter;

    "CancellationSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): CancellationSellOrderEventFilter;
    CancellationSellOrder(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): CancellationSellOrderEventFilter;

    "ClaimedFromOrder(uint256,uint64,uint96,uint96)"(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): ClaimedFromOrderEventFilter;
    ClaimedFromOrder(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): ClaimedFromOrderEventFilter;

    "NewAuction(uint256,address,address,uint256,uint256,uint64,uint96,uint96,uint256,uint256,address,bytes)"(
      auctionId?: BigNumberish | null,
      _auctioningToken?: string | null,
      _biddingToken?: string | null,
      orderCancellationEndDate?: null,
      auctionEndDate?: null,
      userId?: null,
      _auctionedSellAmount?: null,
      _minBuyAmount?: null,
      minimumBiddingAmountPerOrder?: null,
      minFundingThreshold?: null,
      allowListContract?: null,
      allowListData?: null
    ): NewAuctionEventFilter;
    NewAuction(
      auctionId?: BigNumberish | null,
      _auctioningToken?: string | null,
      _biddingToken?: string | null,
      orderCancellationEndDate?: null,
      auctionEndDate?: null,
      userId?: null,
      _auctionedSellAmount?: null,
      _minBuyAmount?: null,
      minimumBiddingAmountPerOrder?: null,
      minFundingThreshold?: null,
      allowListContract?: null,
      allowListData?: null
    ): NewAuctionEventFilter;

    "NewSellOrder(uint256,uint64,uint96,uint96)"(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): NewSellOrderEventFilter;
    NewSellOrder(
      auctionId?: BigNumberish | null,
      userId?: BigNumberish | null,
      buyAmount?: null,
      sellAmount?: null
    ): NewSellOrderEventFilter;

    "NewUser(uint64,address)"(
      userId?: BigNumberish | null,
      userAddress?: string | null
    ): NewUserEventFilter;
    NewUser(
      userId?: BigNumberish | null,
      userAddress?: string | null
    ): NewUserEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UserRegistration(address,uint64)"(
      user?: string | null,
      userId?: null
    ): UserRegistrationEventFilter;
    UserRegistration(
      user?: string | null,
      userId?: null
    ): UserRegistrationEventFilter;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionCounter(overrides?: CallOverrides): Promise<BigNumber>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserId(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numUsers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionAccessData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionAccessManager(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSellOrders(
      auctionId: BigNumberish,
      _sellOrders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFromParticipantOrder(
      auctionId: BigNumberish,
      orders: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    containsOrder(
      auctionId: BigNumberish,
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiverUserId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSecondsRemainingInBatch(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserId(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateAuction(
      _auctioningToken: string,
      _biddingToken: string,
      orderCancellationEndDate: BigNumberish,
      auctionEndDate: BigNumberish,
      _auctionedSellAmount: BigNumberish,
      _minBuyAmount: BigNumberish,
      minimumBiddingAmountPerOrder: BigNumberish,
      minFundingThreshold: BigNumberish,
      isAtomicClosureAllowed: boolean,
      accessManagerContract: string,
      accessManagerContractData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeSellOrders(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeSellOrdersOnBehalf(
      auctionId: BigNumberish,
      _minBuyAmounts: BigNumberish[],
      _sellAmounts: BigNumberish[],
      _prevSellOrders: BytesLike[],
      allowListCallData: BytesLike,
      orderSubmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    precalculateSellAmountSum(
      auctionId: BigNumberish,
      iterationSteps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeParameters(
      newFeeNumerator: BigNumberish,
      newfeeReceiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAuctionAtomically(
      auctionId: BigNumberish,
      _minBuyAmount: BigNumberish[],
      _sellAmount: BigNumberish[],
      _prevSellOrder: BytesLike[],
      allowListCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
